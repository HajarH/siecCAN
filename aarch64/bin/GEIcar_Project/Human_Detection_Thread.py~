# MIT License
# Copyright (c) 2019 JetsonHacks
# See license
# Using a CSI camera (such as the Raspberry Pi Version 2) connected to a
# NVIDIA Jetson Nano Developer Kit using OpenCV
# Drivers for the camera and OpenCV are included in the base image

import time
import detectnet_camera_custom_siec_noCV2 as detect
import numpy as np
import os
import sys

import random

#LIBRARY FOR MULTI-THREADING
import threading
from threading import Thread, Lock

#GLOBAL VARIABLES
import global_variables as glob

#function that return the right number regarding what was detected for the human net
def human_detection_to_ROS_number(class_number):
    if class_number == 0: #Person
        return 1
    elif class_number == 2: #Baggage 
        return 2
    else:
        return 0
            

#Class for CNNs initializations and inferences
class Detection(Thread):

    def __init__(self):
        Thread.__init__(self)

    def run(self):
        #We init human detection CNN
        #print("\nSTART HUMAN CNN INIT\n") #Debug
        net_human = detect.Multiped_Init()
        #print("\nMULTIPED INIT IS DONE\n") #Debug

        #We init the Camera as an input
        input = detect.Video_Source_init("csi://0")

        #Get detectable classes names
        """
        print("FOR HUMANS:\n")
        for i in range(0,net_human.GetNumClasses()):
            print("Number ", i, " :", net_human.GetClassDesc(i),"END")
            print("\n")
        """

        print("INITS WENT WELL\n") #Debug
        time.sleep(2) #Just to get enough time to see that init went well

        while True:

            #We process human detection
            #print("\nSTART HUMAN\n") #Debug
            detections_human = detect.Imageprocessing(net_human, input, "./treated_current_pic_human_detection.png")
            #print("Human detection done\n") #Debug
            #time.sleep(2) #Just to get enough time to see debug message

            #Enumerate all the detections for human detection if there is one
            for detection in detections_human:
                    print("\nWe detected a " + net_human.GetClassDesc(detection.ClassID) + "\n")

                    #Acquire detection_number mutex to update it
                    glob.detection_number.MUT.acquire()
                    glob.detection_number.value = human_detection_to_ROS_number(detection.ClassID)
                    glob.detection_number.MUT.release()
                    #Send event that detection is done
                    glob.detection_done.set()
                    #Wait till event sending_done happens
                    #print("Wait sending_done human\n")
                    glob.sending_done.wait()
                    glob.sending_done.clear()


            #print("\nFINISH HUMAN DETECTION\n") #Debug
            #time.sleep(2) #Just to get enough time to see debug message 

            #print("\nEND LOOP\n") #Debug
            #We wait one second between each loop
            #time.sleep(1)
        
#MAIN PROGRAM
if __name__ == "__main__":

    # Cr√©ation des threads
    detection_thread = Detection()

    # Lancement des threads
    detection_thread.start()

    # Attend que les threads se terminent
    detection_thread.join()

    

    

    
